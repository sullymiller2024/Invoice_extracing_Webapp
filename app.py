{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CmG5mmYEutjy"
      },
      "outputs": [],
      "source": [
        "from flask import Flask, request, send_file , after_this_request\n",
        "from werkzeug.utils import secure_filename\n",
        "import openai\n",
        "import pandas as pd\n",
        "import pytesseract\n",
        "import json\n",
        "from openai import OpenAI\n",
        "import os\n",
        "import io\n",
        "import fitz\n",
        "from PIL import Image\n",
        "app = Flask(__name__)\n",
        "pytesseract.pytesseract.tesseract_cmd = '/app/.apt/usr/bin/tesseract'\n",
        "@app.route('/', methods=['POST'])\n",
        "def upload_files():\n",
        "  uploaded_files = request.files.getlist('invoices')\n",
        "  if not uploaded_files:\n",
        "        return 'No files uploaded', 400\n",
        "  pdf_paths = []\n",
        "  for file in uploaded_files:\n",
        "    if file.filename != '':\n",
        "\n",
        "      filename = secure_filename(file.filename)\n",
        "      temp_path = os.path.join('/tmp', filename)\n",
        "      file.save(temp_path)\n",
        "      pdf_paths.append(temp_path)\n",
        "\n",
        "  if not pdf_paths:\n",
        "    return 'No valid files provided', 400\n",
        "\n",
        "\n",
        "  result_file_path = process_invoices(pdf_paths)\n",
        "\n",
        "  @after_this_request\n",
        "  def remove_files(response):\n",
        "    for path in pdf_paths:\n",
        "      os.remove(path)\n",
        "    os.remove(result_file_path)\n",
        "    return response\n",
        "\n",
        "\n",
        "  return send_file(result_file_path, as_attachment=True, attachment_filename='results.xlsx')\n",
        "\n",
        "def process_invoices(pdf_paths):\n",
        "  master_df = pd.DataFrame()\n",
        "  batch_df = process_batch(pdf_paths)\n",
        "  master_df = pd.concat([master_df, batch_df], ignore_index=True)\n",
        "  result_path = '/tmp/result.xlsx'\n",
        "  with pd.ExcelWriter(result_path, engine='openpyxl')as writer:\n",
        "    master_df.to_excel(writer, sheet_name='All Invoice Details', index=False)\n",
        "  return result_path\n",
        "\n",
        "def extract_text_from_scanned_pdf(pdf_path):\n",
        "    doc = fitz.open(pdf_path)\n",
        "    text = \"\"\n",
        "\n",
        "    for page in doc:\n",
        "        # Extract images from each page\n",
        "        image_list = page.get_images(full=True)\n",
        "\n",
        "        for image_index, img in enumerate(page.get_images(full=True)):\n",
        "            xref = img[0]\n",
        "            base_image = doc.extract_image(xref)\n",
        "            image_bytes = base_image[\"image\"]\n",
        "            image = Image.open(io.BytesIO(image_bytes))\n",
        "            text += pytesseract.image_to_string(image)\n",
        "\n",
        "    doc.close()\n",
        "    return text\n",
        "\n",
        "def parse_invoice_with_model(extracted_text):\n",
        "   client = OpenAI(api_key='sk-proj-jlFpr4SQ7NqqsK4cvchvT3BlbkFJ8jbQrXHuFvdWoxsi356v')\n",
        "\n",
        "   prompt_text =\"\"\"Please parse the following invoice information and return the data in standard dictionary json format with out extra char, recognize invoice number\n",
        "   'Invoice Number', 'Invoice Date', 'Ship To', and 'Line Items'. Each 'Line Item' should include 'QTY', 'Description' , 'Day', 'Week', '4Week',\n",
        "    and 'Price'.There are some items that only have description you must not miss any items even if any information except description is 0.  also be carful  tax count as item in the invoice so the description for that is the type of tax and the amount is the price the qty is 1 for that and it dosent have other info like other inf so put 0 for them like day and week and 4week and :\"\"\"\n",
        "   response = client.chat.completions.create(\n",
        "    model=\"gpt-4o\",\n",
        "    messages=[\n",
        "        {\"role\": \"system\", \"content\": \"Extract structured data from the following invoice text\"},\n",
        "        {\"role\": \"user\", \"content\": prompt_text+extracted_text}\n",
        "    ]\n",
        ")\n",
        "   content_to_save= response.choices[0].message.content\n",
        "   clean_jason = content_to_save.replace('```json','').replace('```','').strip()\n",
        "   data = json.loads(clean_jason)\n",
        "   return data\n",
        "\n",
        "def process_batch(pdf_paths):\n",
        "  all_items=[]\n",
        "  for pdf_path in pdf_paths:\n",
        "    extracted_text = extract_text_from_scanned_pdf(pdf_path)\n",
        "    data = parse_invoice_with_model(extracted_text)\n",
        "    items = data['Line Items'].copy()\n",
        "    for item in items:\n",
        "      item.update({\n",
        "          'Ship To':data [\"Ship To\"],\n",
        "          \"Invoice Number\": data[\"Invoice Number\"],\n",
        "          \"Invoice Date\": data[\"Invoice Date\"]\n",
        "      })\n",
        "      all_items.append(item)\n",
        "  return pd.DataFrame(all_items)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "  app.run(debug=True)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}
